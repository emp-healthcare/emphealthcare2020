/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gatewayguiswing;

import static gatewayguiswing.Sensors.x;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.TextField;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.microedition.io.Connector;
import javax.microedition.io.StreamConnection;
import javax.swing.SwingUtilities;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author blunt
 */
public class MySigns extends javax.swing.JFrame {

    //Sensor Bluetooth Parameter
    private static String commande = "";
    private static Timer timer;
    private static OutputStream os = null;
    private static InputStream is = null;
    private static StreamConnection streamConnection = null;
    private static String hc05Url = "";
    private boolean start = false;
    private BufferedWriter writer = null;
    private BufferedWriter writer2 = null;
    int i = 0;
    private boolean Calcul = false;

    List<Integer> l = new ArrayList<>();
    Runnable r;

    public MySigns() {
        initComponents();
        this.BPT.setEnabled(false);
        this.BTT.setEnabled(false);
        this.GLT.setEnabled(false);
        this.PRT.setEnabled(false);
        this.RRT.setEnabled(false);

        this.BP.setBackground(Color.red);
        this.BT.setBackground(Color.red);
        this.GL.setBackground(Color.red);
        this.PR.setBackground(Color.red);
        this.RR.setBackground(Color.red);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        BP = new javax.swing.JPanel();
        BPT = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        available4 = new javax.swing.JLabel();
        BT = new javax.swing.JPanel();
        BTT = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        available1 = new javax.swing.JLabel();
        PR = new javax.swing.JPanel();
        PRT = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        available = new javax.swing.JLabel();
        RR = new javax.swing.JPanel();
        RRT = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        available2 = new javax.swing.JLabel();
        GL = new javax.swing.JPanel();
        GLT = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        available3 = new javax.swing.JLabel();
        viewSigns = new javax.swing.JButton();
        wait = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("back");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 610, 20));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 50, 20, 160));

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 10, 160));

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 20, 160));

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 10, 160));

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, 10, 160));

        BP.setBackground(new java.awt.Color(255, 102, 102));
        BP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BPT.setText(" ");
        BP.add(BPT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 61, 60, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setText("Blood pressure");
        BP.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("mm Hg");
        BP.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        available4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        available4.setForeground(new java.awt.Color(255, 255, 255));
        available4.setText("Not available");
        BP.add(available4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        jPanel1.add(BP, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, -1, 160));

        BT.setBackground(new java.awt.Color(255, 153, 153));
        BT.setForeground(new java.awt.Color(255, 153, 153));
        BT.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        BT.add(BTT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 70, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Â°C");
        BT.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Body Temperature");
        BT.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));

        available1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        available1.setForeground(new java.awt.Color(255, 255, 255));
        available1.setText("Not available");
        BT.add(available1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        jPanel1.add(BT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 120, 160));

        PR.setBackground(new java.awt.Color(204, 255, 204));
        PR.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PRT.setText(" ");
        PR.add(PRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 60, 30));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Bpm");
        PR.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setText("Pulse rate");
        PR.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        available.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        available.setForeground(new java.awt.Color(255, 255, 255));
        available.setText("Not available");
        PR.add(available, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        jPanel1.add(PR, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 110, 160));

        RR.setBackground(new java.awt.Color(204, 255, 204));
        RR.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        RRT.setText(" ");
        RR.add(RRT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 60, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Bth/m");
        RR.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 204));
        jLabel9.setText("Respiration rate");
        RR.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));

        available2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        available2.setForeground(new java.awt.Color(255, 255, 255));
        available2.setText("Not available");
        RR.add(available2, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 120, -1, -1));

        jPanel1.add(RR, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, 120, 160));

        GL.setBackground(new java.awt.Color(204, 255, 204));
        GL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GLT.setText(" ");
        GL.add(GLT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 80, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 204));
        jLabel4.setText("Glucose level");
        GL.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        available3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        available3.setForeground(new java.awt.Color(255, 255, 255));
        available3.setText("Not available");
        GL.add(available3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        jPanel1.add(GL, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 50, 120, 160));

        viewSigns.setText("View Vital Signs");
        viewSigns.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewSignsMouseClicked(evt);
            }
        });
        jPanel1.add(viewSigns, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, 150, 50));

        wait.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        wait.setForeground(new java.awt.Color(255, 0, 51));
        wait.setText("   ");
        jPanel1.add(wait, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, -1));

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, 10, 160));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 620, 400));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        Home s = new Home();
        s.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1MouseClicked

    private void viewSignsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewSignsMouseClicked
        // TODO add your handling code here:
        if (!viewSigns.getText().equals("Stop")) {
            jButton1.setVisible(false);
            wait.setText("This may take few time ...");
            //Cherchant les capteurs connectÃ©s :
            //Getting Sensors List and search by type :           
            List<String> sensorsNames = sensorsList();
            List<Sensor> sensorsDATA = new ArrayList<Sensor>();

            for (String s : sensorsNames) {
                try {
                    sensorsDATA.add(searchSensorByName(s));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MySigns.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            for (int i = 0; i < sensorsDATA.size(); i++) {
                if (sensorsDATA.get(i).getType().equals("Temperature")) {

                    this.BT.setBackground(Color.GREEN);
                    available1.setText("Available");
                    BTT.setEnabled(true);
                    viewSigns.setText("Stop");

                    l.add(1);

                } else if (sensorsDATA.get(i).getType().equals("Electrocardiography")) {

                    this.PR.setBackground(Color.GREEN);
                    available.setText("Available");
                    PRT.setEnabled(true);
                    viewSigns.setText("Stop");
                    l.add(2);
                }
            }

            //l'interrogation des capteurs un par un :
          //  hc05Url = sensorsDATA.get(1).getHc05UR();
          //  commande = sensorsDATA.get(1).getCommande();
           
          
           r=new Runnable() {
                @Override
                public void run() {
                               
                                System.err.println("sensor 1");
                                commande = sensorsDATA.get(1).getCommande();
                                hc05Url = sensorsDATA.get(1).getHc05UR();   
                                start(1);
                }
            };
            
            SwingUtilities.invokeLater(r);
            
            
            /*
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {           

                                commande = sensorsDATA.get(1).getCommande();
                                hc05Url = sensorsDATA.get(1).getHc05UR();
                                start(1);
                               
                            }
                    
                });*/
                
           
               
           

        } else {
            
           timer.cancel();
            try {
                jButton1.setVisible(true);
                is.close();
                os.write("0".getBytes()); //50 en ASCII
                os.close();
                streamConnection.close();
            } catch (IOException ex) {
                Logger.getLogger(MySigns.class.getName()).log(Level.SEVERE, null, ex);
            }
                  wait.setText("");              
            viewSigns.setText("View Vital Signs");
            this.BPT.setEnabled(false);
            this.BTT.setEnabled(false);
            this.GLT.setEnabled(false);
            this.PRT.setEnabled(false);
            this.RRT.setEnabled(false);

            available.setText("Not available");
            available1.setText("Not available");
            available2.setText("Not available");
            available3.setText("Not available");
            available4.setText("Not available");

            this.BP.setBackground(Color.red);
            this.BT.setBackground(Color.red);
            this.GL.setBackground(Color.red);
            this.PR.setBackground(Color.red);
            this.RR.setBackground(Color.red);
            jButton1.setVisible(true);

        }


    }//GEN-LAST:event_viewSignsMouseClicked

    private synchronized  void lock(){
        Calcul=true;
    }
    
    private synchronized  void unlock(){
        Calcul=false;
    }
    
    private synchronized  boolean test(){
        if(Calcul==false) return true;
        else return false;
    }
    
    private  synchronized void start(int t) {
       while(!test())
       lock();
        try {
            streamConnection = (StreamConnection) Connector.open(hc05Url);
            if (streamConnection != null) {
                os = streamConnection.openOutputStream();
                is = streamConnection.openInputStream();
                os.write(commande.getBytes()); //"1"  pour prendre les mesures de temperatures;"2" pour ECG
                //Commence Ã  recevoir from BT:
                System.err.println("Receiving ... ");
                wait.setText("Receiving ...");
                int tempsDEcoute = 360;
                timer = new Timer();
                timer.scheduleAtFixedRate(new TimerTask() {

                    byte[] b = new byte[200];
                    String result = "";
                    int j = 0;
                    long t0 = System.currentTimeMillis();

                    @Override
                    public void run() {
                        //Buttons

                        if (System.currentTimeMillis() - t0 > tempsDEcoute * 1000) {
                            try {
                                System.out.println("End Of Timer");
                                timer.cancel();
                                is.close();
                                os.write("0".getBytes()); //50 en ASCII
                                os.close();
                                streamConnection.close();
                               unlock();
                            } catch (IOException ex) {
                                Logger.getLogger(ReadFromSensor.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        } else {

                            try {
                                is.read(b);
                                result = new String(b);

                                BTT.setText(result);                              
                                PRT.setText("0");
                                System.err.println(result);
                         
                                
                            } catch (IOException ex) {
                                Logger.getLogger(ReadFromSensor.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    }
                }, 0, 1000);

            }

        } catch (IOException ex) {
            Logger.getLogger(ReadFromSensor.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private List<String> sensorsList() {

        BufferedReader in = null;
        try {
            //From File
            in = new BufferedReader(new FileReader("Ressources/sensorsList.txt"));
            String line;
            List<String> s = new ArrayList<>();
            while ((line = in.readLine()) != null) {
                s.add(line);
            }
            in.close();
            return s;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MySigns.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MySigns.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(MySigns.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return null;
    }

    private Sensor searchSensorByName(String SensorName) throws FileNotFoundException {

        Sensor s = new Sensor();
        s.setName(SensorName);

        try {
            //Get Data du capteur :
            //Ouvertur du fichier :
            BufferedReader in = new BufferedReader(new FileReader("Ressources/SensorsData/" + SensorName + ".txt"));
            String line;
            int i = 0;
            while ((line = in.readLine()) != null) {
                i++;
                switch (i) {
                    case 2:
                        s.setCommande(line);
                        break;
                    case 3:
                        s.setType(line);
                        break;
                    case 4:
                        s.setCommunicationSupport(line);
                        break;
                    case 5:
                        if (s.getCommunicationSupport().equals("Bluetooth")) {

                            s.setHc05UR(line);

                            s.setBtspp((String) line.subSequence(8, 22));
                            if (((String) line.subSequence(36, 41)).equals("true")) {
                                s.setAuthenticate(true);
                            } else {
                                s.setAuthenticate(false);
                            }
                            if (((String) line.subSequence(50, 55)).equals("true")) {
                                s.setEncrypt(true);
                            } else {
                                s.setEncrypt(false);
                            }

                            if (((String) line.subSequence(63, 68)).equals("true")) {
                                s.setMaster(true);
                            } else {
                                s.setMaster(false);
                            }

                        }
                        break;
                    case 6:
                        s.setID(line);
                        break;
                }
            }

            return s;

        } catch (IOException ex) {
            Logger.getLogger(MySigns.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MySigns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MySigns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MySigns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MySigns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MySigns().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BP;
    private javax.swing.JTextField BPT;
    private javax.swing.JPanel BT;
    private javax.swing.JTextField BTT;
    private javax.swing.JPanel GL;
    private javax.swing.JTextField GLT;
    private javax.swing.JPanel PR;
    private javax.swing.JTextField PRT;
    private javax.swing.JPanel RR;
    private javax.swing.JTextField RRT;
    private javax.swing.JLabel available;
    private javax.swing.JLabel available1;
    private javax.swing.JLabel available2;
    private javax.swing.JLabel available3;
    private javax.swing.JLabel available4;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JButton viewSigns;
    private javax.swing.JLabel wait;
    // End of variables declaration//GEN-END:variables
}
